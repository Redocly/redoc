// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Models Schema should correct resolve double $ref if no need sibling 1`] = `
Object {
  "refsStack": Array [
    "#/components/schemas/Parent",
  ],
  "resolved": Object {
    "properties": Object {
      "test": Object {
        "type": "string",
      },
    },
    "type": "object",
  },
}
`;

exports[`Models Schema should deref the properties of a schema 1`] = `
Object {
  "discriminator": Object {
    "mapping": Object {
      "bee": "#/components/schemas/HoneyBee",
      "cat": "#/components/schemas/Cat",
      "dog": "#/components/schemas/Dog",
    },
    "propertyName": "petType",
  },
  "properties": Object {
    "category": Object {
      "description": "Categories this pet belongs to",
      "properties": Object {
        "id": Object {
          "description": "Category ID",
          "example": 0,
          "format": "int64",
          "readOnly": true,
          "type": "integer",
        },
        "name": Object {
          "description": "Category name",
          "example": "string",
          "minLength": 1,
          "type": "string",
        },
        "sub": Object {
          "description": "Test Sub Category",
          "properties": Object {
            "prop1": Object {
              "description": "Dumb Property",
              "example": "string",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
      "xml": Object {
        "name": "Category",
      },
    },
    "friend": Object {},
    "id": Object {
      "description": "Pet ID",
      "example": 0,
      "format": "int64",
      "readOnly": true,
      "type": "integer",
    },
    "name": Object {
      "description": "The name given to a pet",
      "example": "Guru",
      "type": "string",
    },
    "petType": Object {
      "description": "Type of a pet",
      "example": "string",
      "type": "string",
    },
    "photoUrls": Object {
      "description": "The list of URL to a cute photos featuring pet",
      "items": Object {
        "format": "url",
        "type": "string",
      },
      "type": "array",
      "xml": Object {
        "name": "photoUrl",
        "wrapped": true,
      },
    },
    "status": Object {
      "description": "Pet status in the store",
      "enum": Array [
        "available",
        "pending",
        "sold",
      ],
      "example": "available",
      "type": "string",
    },
    "tags": Object {
      "description": "Tags attached to the pet",
      "items": Object {
        "properties": Object {
          "id": Object {
            "description": "Tag ID",
            "example": 0,
            "format": "int64",
            "readOnly": true,
            "type": "integer",
          },
          "name": Object {
            "description": "Tag name",
            "example": "string",
            "minLength": 1,
            "type": "string",
          },
        },
        "type": "object",
        "xml": Object {
          "name": "Tag",
        },
      },
      "type": "array",
      "xml": Object {
        "name": "tag",
        "wrapped": true,
      },
    },
  },
  "required": Array [
    "name",
    "photoUrls",
  ],
  "type": "object",
  "xml": Object {
    "name": "Pet",
  },
}
`;

exports[`Models Schema should hoist oneOfs when mergin allOf 1`] = `
Object {
  "oneOf": Array [
    Object {
      "allOf": Array [
        Object {
          "properties": Object {
            "username": Object {
              "description": "The user's name",
              "type": "string",
            },
          },
        },
        Object {
          "properties": Object {
            "extra": Object {
              "type": "string",
            },
          },
        },
        Object {
          "oneOf": Array [
            Object {
              "properties": Object {
                "password": Object {
                  "description": "The user's password",
                  "type": "string",
                },
              },
            },
            Object {
              "properties": Object {
                "mobile": Object {
                  "description": "The user's mobile",
                  "type": "string",
                },
              },
            },
          ],
        },
      ],
      "x-refsStack": undefined,
    },
    Object {
      "allOf": Array [
        Object {
          "properties": Object {
            "email": Object {
              "description": "The user's email",
              "type": "string",
            },
          },
        },
        Object {
          "properties": Object {
            "extra": Object {
              "type": "string",
            },
          },
        },
        Object {
          "oneOf": Array [
            Object {
              "properties": Object {
                "password": Object {
                  "description": "The user's password",
                  "type": "string",
                },
              },
            },
            Object {
              "properties": Object {
                "mobile": Object {
                  "description": "The user's mobile",
                  "type": "string",
                },
              },
            },
          ],
        },
      ],
      "x-refsStack": undefined,
    },
  ],
}
`;

exports[`Models Schema should override description from $ref of the referenced component, when sibling description exists  1`] = `
Object {
  "refsStack": Array [
    "#/components/schemas/Test",
  ],
  "resolved": Object {
    "description": "Overriden description",
    "type": "object",
  },
}
`;
